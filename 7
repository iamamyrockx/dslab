#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct emp
{
char SSN[12];
char name[25];
char dept[25];
char designation[25];
float salary;
char phone_no[10];
struct node *llink;
struct node *rlink;
};
typedef struct emp EMP;
EMP *read_data()
{
char SSN[12],name[25],dept[25],designation[25];
char phone_no[10];
float salary;
EMP *temp;
temp=(EMP *)malloc(sizeof(EMP));
printf("Enter the Employees Details:\n");
printf("Enter SSN\n");
scanf("%s",temp->SSN);
printf("Enter Name\n");
scanf("%s",temp->name);
printf("Enter Department\n");
scanf("%s",temp->dept);
printf("Enter Designation\n");
scanf("%s",temp->designation);
printf("Enter Salary\n");
scanf("%f",&temp->salary);
printf("Enter Phone Number\n");
scanf("%s",temp->phone_no);
temp->rlink=temp->llink=NULL;
return temp;
}
EMP *insert_front(EMP *head)
{
EMP *temp,*next;
temp=read_data();
next=head->rlink;
head->rlink=temp;
temp->llink=head;
next->llink=temp;
temp->rlink=next;
return head;
}
EMP *delete_end(EMP *head)
{
EMP *cur,*prev;
if(head->rlink==NULL)
printf("List is empty\n");
else
{
cur=head->rlink;
if (cur->rlink==NULL)
head->rlink=NULL;
else
{
while(cur->rlink!=NULL)
{
prev=cur;
cur=cur->rlink;
}
prev->rlink=NULL;
}
free(cur);
}
return head;
}
EMP *delete_front(EMP *head)
{
EMP *cur,*next;
if(head->rlink==NULL)
printf("List is empty\n");
else
{
cur=head->rlink;
if (cur->rlink==NULL)
head->rlink=NULL;
else
{
next=cur->rlink;
next->llink=head;
head->rlink=next;
}
free(cur);
}
return head;
}
EMP *insert_end(EMP *head)
{
EMP *cur,*temp;
temp=read_data();
cur=head;
while(cur->rlink!=NULL)
cur=cur->rlink;
cur->rlink=temp;
temp->llink=cur;
return head;
}
EMP *deq(EMP *head)
{
int ch;
while(1)
{
printf("1.Insert front\n2.Insert End\n3.Delete Front\n4.Delete
End\n5.Display\n6.Exit\n");
scanf("%d",&ch);
switch(ch)
{
case 1: head=insert_front(head);
break;
case 2: head=insert_end(head);
break;
case 3: head=delete_front(head);
break;
case 4: head=delete_end(head);
break;
case 5: display(head);
break;
case 6: return;
}
}
}
void display(EMP *head)
{
EMP *cur;
int count=0;
if(head->rlink==NULL)
printf("List is empty\n");
else
{
cur=head->rlink;
printf("SSN\tName\tDept\tDesignation\tSalary\tPhone_No.\n");
while(cur!=NULL)
{
printf("%s\t%s\t%s\t%s\t%f\t%s\n",cur->SSN,cur->name,cur->dept,cur-
>designation,cur->salary,cur->phone_no);
cur=cur->rlink;
count++;
}
printf("Number of nodes in DLL=%d\n",count);
}
}
void main()
{
int ch,n,i;
EMP *head;
head=(EMP *)malloc(sizeof(EMP));
head->rlink=head->llink=NULL;
printf("Creation of DLL\n");
printf("Enter the number of employees\n");
scanf("%d",&n);
for (i=1;i<=n;i++)
head=insert_end(head);
while (1)
{
printf("1.Display\n2.Insert End\n3:Delete End\n4.Insert Front\n5.Delete
Front\n6.Double Ended Queue\n7.Exit\n");
printf("Enter the choice\n");
scanf("%d",&ch);
switch(ch)
{
case 1: display(head);
break;
case 2: head=insert_end(head);
printf("Node Inserted at the End\n");
break;
case 3: head=delete_end(head);
printf("Node deleted at the End\n");
break;
case 4: head=insert_front(head);
printf("Node Inserted at Front\n");
break;
case 5: head=delete_front(head);
printf("Node deleted at Front\n");
break;
case 6: head=deq(head);
break;
case 7: exit(0);
}
}
}
