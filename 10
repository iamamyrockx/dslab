#include<stdio.h>
#include<stdlib.h>
struct node
{
int info;
struct node *llink;
struct node *rlink;
};
typedef struct node NODE;
NODE *root;
void insert(int item)
{
NODE *temp,*cur,*prev;
temp=(NODE *)malloc(sizeof(NODE));
temp->info=item;
temp->llink=NULL;
temp->rlink=NULL;
if(root==NULL)
{
root= temp;
}
else
{
prev=NULL;
cur=root;
while(cur!=NULL)
{
prev=cur;
cur=(item<=cur->info)?cur->llink:cur->rlink;
}
if(item<=prev->info)
prev->llink=temp;
else
prev->rlink=temp;
}}
void construct_BST()
{
int a,n,i;
printf("Enter the number of nodes\n");
scanf("%d",&n);
printf("Enter the elements to be inserted in the tree\n");
for (i=0;i<n;i++)
{
scanf("%d",&a);
insert(a);
}
printf("Tree Constructed Successfully!!!!!!\n");
}
void preorder(NODE *root)
{
if(root!=NULL)
{
printf("%d\t",root->info);
preorder(root->llink);
preorder(root->rlink);
}
}
void inorder(NODE *root)
{
if(root!=NULL)
{
inorder(root->llink);
printf("%d\t",root->info);
inorder(root->rlink);
}
}
void postorder(NODE *root)
{
if(root!=NULL)
{
postorder(root->llink);
postorder(root->rlink);
printf("%d\t",root->info);
}
}
void search_element(NODE *root,int key)
{
NODE *cur;
cur=root;
while(cur!=NULL)
{
if (key==cur->info)
{
printf("element found");
return;
}
else if (key<cur->info)
cur=cur->llink;
else
cur=cur->rlink;
}
printf("element not found");
}
void main()
{
int item,ch,key,n;
root=NULL;
while (1)
{
printf("\nEnter the choice\n1.Construct
BST\n2.Preorder\n3.Inorder\n4.Postorder\n5.Search an Element\n6:Exit\n");
scanf("%d",&ch);
switch(ch)
{
case 1: construct_BST();
break;
case 2: preorder(root);
break;
case 3: inorder(root);
break;
case 4: postorder(root);
break;
case 5: if (root==NULL)
printf("List Empty\n");
else
{
printf("Enter the element\n");
scanf("%d",&key);
search_element(root,key);
}
break;
case 6: exit(0);
default: printf("Wrong Choice\n");
}
}
}
